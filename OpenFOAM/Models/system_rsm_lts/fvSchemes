/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         localEuler; 	//backward, crankNicholson
}

gradSchemes
{
    default         cellLimited leastSquares 1;
    //default         cellLimited Gauss linear 1;
}

defaultAdvScheme     vanAlbada;
defaultAdvSchemeV    vanAlbadaV;

//First Order
//defaultAdvScheme     upwind;
//defaultAdvSchemeV    upwind;

divSchemes
{
    default         none;

    //momentum equation
    div(phi_nei,U)	Gauss $defaultAdvSchemeV;
    div(phi_own,U)	Gauss $defaultAdvSchemeV;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
	//RSM adders
    div(((rho*(thermo:mu|rho))*dev2(T(grad(U))))) Gauss linear;
    div((rho*R)) Gauss linear;

    //energy equation
    div(phi_nei,h)	Gauss $defaultAdvScheme;
    div(phi_own,h)	Gauss $defaultAdvScheme;
    div(phi_nei,K)	Gauss $defaultAdvScheme;
    div(phi_own,K)	Gauss $defaultAdvScheme;

    //continuity equation
    div(phid_nei,p)	Gauss $defaultAdvScheme;
    div(phid_own,p)	Gauss $defaultAdvScheme;
    
    //turbulence
    div(phi,omega)      Gauss linearUpwind default; //upwind, linear;
    div(phi,k)          Gauss linearUpwind default; //upwind, linear;
    
    //RSM adders
    div(phi,epsilon)    Gauss linearUpwind default; //upwind, linear;
    div(phi,R)		Gauss upwind; //upwind, linear;
}

laplacianSchemes
{
    default         Gauss linear corrected;
    //default     Gauss linear limited 0.333;  //for non orthogonal meshes
}

defaultIntAdvScheme     vanAlbada;
defaultIntAdvSchemeV    vanAlbadaV;

interpolationSchemes
{
    default			linear;
	
    interpolate(rho)		linear;
    interpolate((rho*U))	linear;

	//Trials
    dotInterpolate(((S&interpolate((rho*DepsilonEff)))-(((S&interpolate((rho*DepsilonEff)))&(S|magSf))*(S|magSf))),grad(epsilon))	linear;
    dotInterpolate(((S&interpolate((rho*DREff)))-(((S&interpolate((rho*DREff)))&(S|magSf))*(S|magSf))),grad(R))		linear;
    //dotInterpolate(((S&interpolate((rho*DREff)))-(((S&interpolate((rho*DREff)))&(S|magSf))*(S|magSf))),grad(R.component(1)))		linear;
    //dotInterpolate(((S&interpolate((rho*DREff)))-(((S&interpolate((rho*DREff)))&(S|magSf))*(S|magSf))),grad(R.component(2)))		linear;
    //dotInterpolate(((S&interpolate((rho*DREff)))-(((S&interpolate((rho*DREff)))&(S|magSf))*(S|magSf))),grad(R.component(3)))		linear;
    //dotInterpolate(((S&interpolate((rho*DREff)))-(((S&interpolate((rho*DREff)))&(S|magSf))*(S|magSf))),grad(R.component(4)))		linear;
    //dotInterpolate(((S&interpolate((rho*DREff)))-(((S&interpolate((rho*DREff)))&(S|magSf))*(S|magSf))),grad(R.component(5)))		linear;
    //dotInterpolate(((S&interpolate((rho*DREff)))-(((S&interpolate((rho*DREff)))&(S|magSf))*(S|magSf))),grad(R.component(6)))		linear;

    reconstruct(rho)		$defaultIntAdvScheme;
    reconstruct(psi)		$defaultIntAdvScheme;
    reconstruct(p)		$defaultIntAdvScheme;
    reconstruct(U)		$defaultIntAdvSchemeV;
    reconstruct(rho*U)		$defaultIntAdvSchemeV;
    reconstruct(Dp)	        $defaultIntAdvScheme;
}

snGradSchemes
{
    default         corrected;
    //default         limited 0.333;  //for non orthogonal meshes
}

fluxRequired
{
    default	none;
    p;
}

wallDist
{
    method    meshWave;
}

// ************************************************************************* //
